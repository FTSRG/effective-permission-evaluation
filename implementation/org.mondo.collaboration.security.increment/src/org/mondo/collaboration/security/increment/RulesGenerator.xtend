/*
 * generated by Xtext 2.10.0
 */
package org.mondo.collaboration.security.increment

import java.util.ArrayList
import java.util.HashSet
import java.util.List
import java.util.Set
import java.util.TreeSet
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.viatra.query.patternlanguage.emf.vql.Pattern
import org.eclipse.viatra.query.patternlanguage.emf.vql.PatternModel
import org.eclipse.viatra.query.patternlanguage.emf.vql.Variable
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.mondo.collaboration.policy.rules.AccessControlModel
import org.mondo.collaboration.policy.rules.AccessibilityLevel
import org.mondo.collaboration.policy.rules.AttributeFact
import org.mondo.collaboration.policy.rules.Binding
import org.mondo.collaboration.policy.rules.Group
import org.mondo.collaboration.policy.rules.ModelFact
import org.mondo.collaboration.policy.rules.ObjectFact
import org.mondo.collaboration.policy.rules.OperationType
import org.mondo.collaboration.policy.rules.Policy
import org.mondo.collaboration.policy.rules.ReferenceFact
import org.mondo.collaboration.policy.rules.Role
import org.mondo.collaboration.policy.rules.Rule
import org.mondo.collaboration.policy.rules.User
import org.mondo.collaboration.policy.delegation.delegation.Delegation
import org.mondo.collaboration.policy.delegation.delegation.DelegationModel

/**
 * Generates code from your AccessControlModel files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RulesGenerator extends AbstractGenerator {
	var List<Rule> explicitRulesObjectAllow = new ArrayList<Rule>();
    var List<Rule> explicitRulesObjectDeny = new ArrayList<Rule>();
	var List<Rule> explicitRulesAttributeAllow = new ArrayList<Rule>();
	var List<Rule> explicitRulesAttributeDeny = new ArrayList<Rule>();
	var List<Rule> explicitRulesReferenceAllow = new ArrayList<Rule>();
	var List<Rule> explicitRulesReferenceDeny = new ArrayList<Rule>();
	var List<Delegation> delegationsObjectAllow = new ArrayList<Delegation>();
	var List<Delegation> delegationsAttributeAllow = new ArrayList<Delegation>();
	var List<Delegation> delegationsReferenceAllow = new ArrayList<Delegation>();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
//		if(resource.contents.head instanceof AccessControlModel) {
//			val model = resource.contents.head as AccessControlModel;
//			fillRuleLists(model);
//		    doGenerate(model, fsa, context);
//		} else if(resource.contents.head instanceof EPackage) {
//			val metamodel = resource as EPackage
//			doGenerate(metamodel, fsa, context);
//		} else {
//			val root = resource.contents.head as EObject
//			val metamodel = root.eClass.EPackage as EPackage
//			doGenerate(metamodel, fsa, context);
//		}
	}
	
	public def void doGenerate(EPackage metamodel, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(metamodel.name+"_gen.vql", generateMetaModelPattern(metamodel))
	}
	
	public def void doGenerateAllInOne(String pack, Resource acResource, Resource delegationResource, EPackage metamodel, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val acModel = acResource.contents.head as AccessControlModel
		fillRuleLists(acModel)
		val delegationModel = delegationResource.contents.head as DelegationModel
		fillDelegationLists(delegationModel)
		val priorities = acModel.priorities
	    fsa.generateFile(acModel.eResource.className+"_all_in_one.vql", generateAllInOne(pack, acModel, delegationModel, metamodel, priorities));
	}
	
	public def void doGenerate(AccessControlModel acModel, DelegationModel delegationModel, EPackage metamodel, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val priorities = acModel.priorities
		fsa.generateFile(acModel.eResource.className+"_helper_patterns.vql", generateHelperPatterns(acModel, delegationModel));
		fsa.generateFile(acModel.eResource.className+"_object_patterns.vql", generateObjectPatterns(acModel, delegationModel, metamodel, priorities));
		fsa.generateFile(acModel.eResource.className+"_attribute_patterns.vql", generateAttributePatterns(acModel, delegationModel, metamodel, priorities));
		fsa.generateFile(acModel.eResource.className+"_reference_patterns.vql", generateReferencePatterns(acModel, delegationModel, metamodel, priorities));
	}
	
	static def mainVQLFile(AccessControlModel model) {
		model.eResource.className+"_all_in_one.vql"	    
	}
	
	static def mainQuerySpecification(PatternModel model) {
		model.patterns.filter[x | x.name.equals("effectiveJudgementOnObject") || x.name.equals("effectiveJudgementOnReference") || x.name.equals("effectiveJudgementOnAttribute")]	    
	}
	
	static def collectVQLFiles(AccessControlModel model, Resource instanceModel) {
		#[ model.eResource.className+"_all_in_one.vql" ]
	}
	
	static def className(Resource resource) {
		var name = resource.URI.lastSegment
		return name.substring(0, name.indexOf('.'))
	}
	
	def generateAllInOne(String pack, AccessControlModel acModel, DelegationModel delegationModel, EPackage metamodel, TreeSet<Integer> priorities) '''
	�generateImport(pack, metamodel.nsURI)�
	
	�generateHelperPatterns(acModel, delegationModel, false)�
	�generateObjectPatterns(acModel, delegationModel, metamodel, priorities, false)�
	�generateAttributePatterns(acModel, delegationModel, metamodel, priorities, false)�
	�generateReferencePatterns(acModel, delegationModel, metamodel, priorities, false)�
	�generateMetaModelPattern(metamodel, false)�
	'''
	
	def fillRuleLists(AccessControlModel model) {
		val rules = model.policy.rules;
		explicitRulesObjectAllow = rules.filter[ rule | rule.asset instanceof ObjectFact && rule.access == AccessibilityLevel.ALLOW].toList;
		explicitRulesObjectDeny = rules.filter[ rule | rule.asset instanceof ObjectFact && rule.access == AccessibilityLevel.DENY].toList;
		explicitRulesAttributeAllow = rules.filter[ rule | rule.asset instanceof AttributeFact && rule.access == AccessibilityLevel.ALLOW].toList;
		explicitRulesAttributeDeny = rules.filter[ rule | rule.asset instanceof AttributeFact && rule.access == AccessibilityLevel.DENY].toList;
		explicitRulesReferenceAllow = rules.filter[ rule | rule.asset instanceof ReferenceFact && rule.access == AccessibilityLevel.ALLOW].toList;
		explicitRulesReferenceDeny = rules.filter[ rule | rule.asset instanceof ReferenceFact && rule.access == AccessibilityLevel.DENY].toList;
	}
	
	def fillDelegationLists(DelegationModel model) {
		val delegations = model.delegations;
		delegationsObjectAllow = delegations.filter[ d | d.asset instanceof ObjectFact].toList;
		delegationsAttributeAllow = delegations.filter[ d | d.asset instanceof AttributeFact].toList;
		delegationsReferenceAllow = delegations.filter[ d | d.asset instanceof ReferenceFact].toList;
	}

	def generateImport(String pack, String nsUri) '''
    package org.mondo.collaboration.security.query.generated.query�pack�
���    package org.mondo.collaboration.security.application.query

    import "http://www.eclipse.org/emf/2002/Ecore"
    import "http://www.mondo.org/collaboration/policy/Rules"
    import "http://www.mondo.org/collaboration/policy/delegation/Delegation"
    import "�nsUri�"
    '''	

	def generateUserSpecificPatterns(AccessControlModel model) {
		generateUserSpecificPatterns(model, true)
	}
	
	def generateUserSpecificPatterns(AccessControlModel model, boolean requiredImport)'''
	
	�FOR user: model.roles.usersOfRoleList2 SEPARATOR "\n"�
	pattern effectiveJudgementOnObjectForUser�user.name�(object: EObject, operation: OperationType, access: AccessibilityLevel) {
		find effectiveJudgementOnObject("�user.name�", object, operation, access);
	}
	
	pattern effectiveJudgementOnReferenceForUser�user.name�(source: EObject, target: EObject, reference: java String, operation: OperationType, access: AccessibilityLevel) {
		find effectiveJudgementOnReference("�user.name�", source, target, reference, operation, access);
	}	
	
	pattern effectiveJudgementOnAttributeForUser�user.name�(source: EObject, value: java Object, attribute : java String, operation: OperationType, access: AccessibilityLevel) {
		find effectiveJudgementOnAttribute("�user.name�", source, value, attribute, operation, access);
	}
	�ENDFOR�
	'''

	def generateHelperPatterns(AccessControlModel acModel, DelegationModel delegationModel) {
		generateHelperPatterns(acModel, delegationModel, true)
	}
	
    def generateHelperPatterns(AccessControlModel acModel, DelegationModel delegationModel, boolean requiredImport) '''
    pattern readWriteOperation(operation) = {
    	operation == OperationType::READ;
    } or {
    	operation == OperationType::WRITE;
    }
    
    pattern allUsers(user: java String) {
        �FOR user: acModel.roles.usersOfRoleList SEPARATOR "\n} or {"�
        user == "�user.name�";
        �ENDFOR�
    }
    
    �FOR rule: acModel.policy.rules SEPARATOR "\n" AFTER "\n"�
        �generateAssetHelperPattern(rule)�
        
        �generateUserHelperPattern(rule)�
    �ENDFOR�
    
    �FOR delegation: delegationModel.delegations SEPARATOR "\n" AFTER "\n"�
        �generateAssetHelperPattern(delegation)�
        
        �generateUserHelperPattern(delegation)�
    �ENDFOR�
    '''
    
    def generateObjectPatterns(AccessControlModel acModel, DelegationModel delegationModel, EPackage metamodel, TreeSet<Integer> priorities) {
    	generateObjectPatterns(acModel, delegationModel, metamodel, priorities, true)
    }

    def generateObjectPatterns(AccessControlModel acModel, DelegationModel delegationModel, EPackage metamodel, TreeSet<Integer> priorities, boolean requiredImport) '''
	    �generateExplicitJudgement_object(acModel)�
	    �generateDelegationJudgement_object(delegationModel)�
	    �generateEffectiveJudgement_object(acModel, priorities, delegationModel)�
	    �generateDominationByPriority_object(priorities)�
	    �generateDominationByAccess_object(acModel, priorities)�
	    �generateJudgement_object(priorities)�
	    �generateStrongConsequenceJudgement_object(metamodel, priorities)�
    '''
    
    def generateAttributePatterns(AccessControlModel acModel, DelegationModel delegationModel, EPackage metamodel, TreeSet<Integer> priorities) {
    	generateAttributePatterns(acModel, delegationModel, metamodel, priorities, true)
    }

    def generateAttributePatterns(AccessControlModel acModel, DelegationModel delegationModel, EPackage metamodel, TreeSet<Integer> priorities, boolean requiredImport) '''
	    �generateExplicitJudgement_attribute(acModel)�
	    �generateDelegationJudgement_attribute(delegationModel)�
	    �generateEffectiveJudgement_attribute(acModel, priorities, delegationModel)�
	    �generateDominationByPriority_attribute(priorities)�
	    �generateDominationByAccess_attribute(acModel, priorities)�
	    �generateJudgement_attribute(priorities)�
	    �generateStrongConsequenceJudgement_attribute(metamodel, priorities)�
	    �generateWeakConsequenceJudgement_attribute(priorities)�
    '''
    
    def generateReferencePatterns(AccessControlModel acModel, DelegationModel delegationModel, EPackage metamodel, TreeSet<Integer> priorities) {
    	generateReferencePatterns(acModel, delegationModel, metamodel, priorities, true)
    }

    def generateReferencePatterns(AccessControlModel acModel, DelegationModel delegationModel, EPackage metamodel, TreeSet<Integer> priorities, boolean requiredImport) '''
	    �generateExplicitJudgement_reference(acModel)�
	    �generateDelegationJudgement_reference(delegationModel)�
	    �generateEffectiveJudgement_reference(acModel, priorities, delegationModel)�
	    �generateDominationByPriority_reference(priorities)�
	    �generateDominationByAccess_reference(acModel, priorities)�
	    �generateJudgement_reference(priorities)�
	    �generateStrongConsequenceJudgement_reference(metamodel, priorities)�
	    �generateWeakConsequenceJudgement_reference(priorities)�
    '''

    def generateExplicitJudgement_object(AccessControlModel model) '''
	    �IF !explicitRulesObjectAllow.empty || model.policy.access == AccessibilityLevel.ALLOW�
            �generateExplicitJudgement_object_allow(model)�
	    �ENDIF�
    
	    �IF !explicitRulesObjectDeny.empty || model.policy.access == AccessibilityLevel.DENY�
            �generateExplicitJudgement_object_deny(model)�
	    �ENDIF�
    '''
    
    def generateExplicitJudgement_object_allow(AccessControlModel model) '''
	    pattern explicitJudgement_object_allow(user : java String, object : EObject, operation, priority : java Integer)
	    {
	    �FOR rule : explicitRulesObjectAllow SEPARATOR "\n} or {"�
	        �generateRule_object(rule)�
	    �ENDFOR�
	    �IF model.policy.access == AccessibilityLevel.ALLOW�
	        �IF !explicitRulesObjectAllow.empty�
	            } or {
	        �ENDIF�
	        �generateDefaultRule_object(model.policy)�
	    �ENDIF�
	    }
    '''
    
    def generateExplicitJudgement_object_deny(AccessControlModel model) '''
	    pattern explicitJudgement_object_deny(user : java String, object : EObject, operation, priority : java Integer)
	    {
	    �FOR rule : explicitRulesObjectDeny SEPARATOR "\n} or {"�
	        �generateRule_object(rule)�
	    �ENDFOR�
	    �IF model.policy.access == AccessibilityLevel.DENY�
	        �IF !explicitRulesObjectDeny.empty�
	            } or {
	        �ENDIF�
	        �generateDefaultRule_object(model.policy)�
	    �ENDIF�
	    }
    '''
    
    def generateRule_object(Rule rule) '''
    //  rule �rule.name�
        find �rule.name�RuleAsset(object);
        find �rule.name�RuleUser(user);
        �generateOperationType(rule.operation)�
        priority == �rule.priority�;
    '''

    def generateDefaultRule_object(Policy policy) '''
    //  rule default
        find objectAsset(object);
        find allUsers(user);
        find readWriteOperation(operation);
        priority == eval(-1);
    '''
    
    
    def generateExplicitJudgement_attribute(AccessControlModel model) '''
    �IF !explicitRulesAttributeAllow.empty || model.policy.access == AccessibilityLevel.ALLOW�
    �generateExplicitJudgement_attribute_allow(model)�
    �ENDIF�
    �IF !explicitRulesAttributeDeny.empty || model.policy.access == AccessibilityLevel.DENY�
    �generateExplicitJudgement_attribute_deny(model)�
    �ENDIF�
    '''
    
    def generateExplicitJudgement_attribute_allow(AccessControlModel model) '''
    pattern explicitJudgement_attribute_allow(user : java String, source : EObject, value: java Object, attribute : java String, operation, priority: java Integer)
    {
    �FOR rule : explicitRulesAttributeAllow SEPARATOR "\n} or {"�
        �generateRule_attribute(rule)�
    �ENDFOR�
    �IF model.policy.access == AccessibilityLevel.ALLOW�
        �IF !explicitRulesAttributeAllow.empty�
            } or {
        �ENDIF�
        �generateDefaultRule_attribute(model.policy)�
    �ENDIF�
    }    
    '''
    
    def generateExplicitJudgement_attribute_deny(AccessControlModel model) '''
    pattern explicitJudgement_attribute_deny(user : java String, source : EObject, value: java Object, attribute : java String, operation, priority: java Integer)
    {
    �FOR rule : explicitRulesAttributeDeny SEPARATOR "\n} or {"�
        �generateRule_attribute(rule)�
    �ENDFOR�
    �IF model.policy.access == AccessibilityLevel.DENY�
       �IF !explicitRulesAttributeDeny.empty�
            } or {
       �ENDIF�
       �generateDefaultRule_attribute(model.policy)�
    �ENDIF�
    }
    '''
    
    def generateRule_attribute(Rule rule) '''
    //  rule �rule.name�
        find �rule.name�RuleAsset(source, value, attribute);
        find �rule.name�RuleUser(user);
        �generateOperationType(rule.operation)�
        priority == �rule.priority�;
    '''

    def generateDefaultRule_attribute(Policy policy) '''
    //  rule default
        find attributeAsset(source, value, attribute);
        find allUsers(user);
        find readWriteOperation(operation);
        priority == eval(-1);
    '''
    
    
    def generateExplicitJudgement_reference(AccessControlModel model) '''
    �IF !explicitRulesReferenceAllow.empty || model.policy.access == AccessibilityLevel.ALLOW�
    �generateExplicitJudgement_reference_allow(model)�
    �ENDIF�
    �IF !explicitRulesReferenceDeny.empty || model.policy.access == AccessibilityLevel.DENY�    
    �generateExplicitJudgement_reference_deny(model)�
    �ENDIF�
    '''
    
    def generateExplicitJudgement_reference_allow(AccessControlModel model) '''
    pattern explicitJudgement_reference_allow(user : java String, source : EObject, target : EObject, reference : java String, operation, priority: java Integer)
    {
    �FOR rule : explicitRulesReferenceAllow SEPARATOR "\n} or {"�
        �generateRule_reference(rule)�
    �ENDFOR�
    �IF model.policy.access == AccessibilityLevel.ALLOW�
        �IF !explicitRulesReferenceAllow.empty�
            } or {
        �ENDIF�
        �generateDefaultRule_reference(model.policy)�
    �ENDIF�
    }
    '''
    
    def generateExplicitJudgement_reference_deny(AccessControlModel model) '''
    pattern explicitJudgement_reference_deny(user : java String, source : EObject, target : EObject, reference : java String, operation, priority: java Integer)
    {
    �FOR rule : explicitRulesReferenceDeny SEPARATOR "\n} or {"�
        �generateRule_reference(rule)�
    �ENDFOR�
    �IF model.policy.access == AccessibilityLevel.DENY�
       �IF !explicitRulesReferenceDeny.empty�
           } or {
       �ENDIF�
       �generateDefaultRule_reference(model.policy)�
    �ENDIF�
    }    
    '''
    
    def generateRule_reference(Rule rule) '''
    //  rule �rule.name�
        find �rule.name�RuleAsset(source, target, reference);
        find �rule.name�RuleUser(user);
        �generateOperationType(rule.operation)�
        priority == �rule.priority�;
    '''

    def generateDefaultRule_reference(Policy policy) '''
    //  rule default
        find referenceAsset(source, target, reference);
        find allUsers(user);
        find readWriteOperation(operation);
        priority == eval(-1);
    '''
    
    
    
    def generateDelegationJudgement_object(DelegationModel model) '''
    �IF !delegationsObjectAllow.empty�
    pattern delegationJudgement_object_allow(user: java String, object: EObject, operation)
    {
    	�FOR Delegation delegation : delegationsObjectAllow SEPARATOR "\n} or {"�
    	    �generateDelegation_object_allow(delegation)�
    	�ENDFOR�
    }
    �ENDIF�
    '''
    
    def generateDelegation_object_allow(Delegation delegation) '''
���    find effectiveJudgement_object_allow("�delegation.source.name�", object, _priority, operation, AccessibilityLevel::ALLOW);
    find �delegation.name�DelegationAsset(object);
    find �delegation.name�DelegationUser(user);
    �generateOperationType(delegation.operation)�
    '''
    
    
    def generateDelegationJudgement_attribute(DelegationModel model) '''
    �IF !delegationsAttributeAllow.empty�
    pattern delegationJudgement_attribute_allow(user: java String, object: EObject, operation)
    {
        �FOR Delegation delegation : delegationsAttributeAllow SEPARATOR "\n} or {"�
            �generateDelegation_attribute_allow(delegation)�
        �ENDFOR�
    }
    �ENDIF�
    '''
    
    def generateDelegation_attribute_allow(Delegation delegation) '''
���    find effectiveJudgement_attribute_allow("�delegation.source.name�", source, value, attribute, _priority, operation, AccessibilityLevel::ALLOW);
    find �delegation.name�DelegationAsset(source, value, attribute);
    find �delegation.name�DelegationUser(user);
    �generateOperationType(delegation.operation)�
    '''


    def generateDelegationJudgement_reference(DelegationModel model) '''
    �IF !delegationsReferenceAllow.empty�
    pattern delegationJudgement_reference_allow(user: java String, object: EObject, operation)
    {
        �FOR Delegation delegation : delegationsReferenceAllow SEPARATOR "\n} or {"�
        	�generateDelegation_reference_allow(delegation)�
        �ENDFOR�
    }
    �ENDIF�
    '''
    
    def generateDelegation_reference_allow(Delegation delegation) '''
���    find effectiveJudgement_reference_allow("�delegation.source.name�", source, target, reference, _priority, operation, AccessibilityLevel::ALLOW);
    find �delegation.name�DelegationAsset(source, target, reference);
    find �delegation.name�DelegationUser(user);
    �generateOperationType(delegation.operation)�
    '''
    
    
    
    def generateEffectiveJudgement_object(AccessControlModel acModel, TreeSet<Integer> priorities, DelegationModel delegationModel) '''
    pattern effectiveJudgement_object(user: java String, object: EObject, priority: java Integer, operation, access)
    {
        find effectiveJudgement_object_default(user, object, operation, access);
        priority == eval(-1);
    } or {
        find effectiveJudgement_object_weak(user, object, operation, access);
        priority == 0;
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {"�
            find effectiveJudgement_object_�prio�(user, object, operation, access);
            priority == �prio�;
        �ENDFOR�
    } or {
    	find effectiveJudgement_object_delegation(user, object, operation, access);
    	priority == 1000;
    }
        
    �generateEffectiveJudgement_object_default(acModel)�
    
    �generateEffectiveJudgement_object_weak(acModel)�
    
    �generateEffectiveJudgement_object_priority(acModel, priorities)�
    
    �generateEffectiveJudgement_object_delegation(delegationModel)�
    
    �generateEffectiveJudgement_object_allow(acModel, priorities)�
    '''
    
    def generateEffectiveJudgement_object_default(AccessControlModel model) '''
    pattern effectiveJudgement_object_default(user: java String, object: EObject, operation, access)
    {
    	�IF model.policy.access == AccessibilityLevel.ALLOW�
    	    find explicitJudgement_object_allow(user, object, operation, eval(-1));
    	    access == AccessibilityLevel::ALLOW;
    	�ENDIF�
        �IF model.policy.access == AccessibilityLevel.DENY�
        find explicitJudgement_object_deny(user, object, operation, eval(-1));
            access == AccessibilityLevel::DENY;
        �ENDIF�
        neg find dominationByPriority_object_default(user, object, operation);
    }
    '''
    
    def generateEffectiveJudgement_object_weak(AccessControlModel model) '''
    pattern effectiveJudgement_object_weak(user: java String, object: EObject, operation, access)
    {
    	find effectiveJudgement_object_weak_allow(user, object, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_object_weak_deny(user, object, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    �generateEffectiveJudgement_object_weak_allow(model)�
    
    �generateEffectiveJudgement_object_weak_deny(model)�
    '''
    
    def generateEffectiveJudgement_object_weak_allow(AccessControlModel model) '''
    pattern effectiveJudgement_object_weak_allow(user: java String, object: EObject, operation)
    {
    	find judgement_object_weak_allow(user, object, operation);
        neg find dominationByPriority_object_weak(user, object, operation);
        �IF model.policy.resolution != ResolutionType.PERMISSIVE�
            neg find dominationByAccess_object_weak(user, object, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_object_weak_deny(AccessControlModel model) '''
    pattern effectiveJudgement_object_weak_deny(user: java String, object: EObject, operation)
    {
        find judgement_object_weak_deny(user, object, operation);
        neg find dominationByPriority_object_weak(user, object, operation);
        �IF model.policy.resolution != ResolutionType.RESTRICTIVE�
            neg find dominationByAccess_object_weak(user, object, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_object_priority(AccessControlModel model, TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    pattern effectiveJudgement_object_�prio�(user: java String, object: EObject, operation, access)
    {
    	find effectiveJudgement_object_�prio�_allow(user, object, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_object_�prio�_deny(user, object, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    �generateEffectiveJudgement_object_priority_allow(model, priorities, prio)�
            
    �generateEffectiveJudgement_object_priority_deny(model, priorities, prio)�
    �ENDFOR�
    '''
    
    def generateEffectiveJudgement_object_priority_allow(AccessControlModel model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_object_�prio�_allow(user: java String, object: EObject, operation)
    {
        find judgement_object_�prio�_allow(user, object, operation);
        neg find dominationByPriority_object_�prio�(user, object, operation);
        �IF model.policy.resolution != ResolutionType.PERMISSIVE�
            neg find dominationByAccess_object_�prio�(user, object, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_object_priority_deny(AccessControlModel model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_object_�prio�_deny(user: java String, object: EObject, operation)
    {
        find judgement_object_�prio�_deny(user, object, operation);
        neg find dominationByPriority_object_�prio�(user, object, operation);
        �IF model.policy.resolution != ResolutionType.RESTRICTIVE�
            neg find dominationByAccess_object_�prio�(user, object, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_object_delegation(DelegationModel model) '''
    pattern effectiveJudgement_object_delegation(user: java String, object: EObject, operation, access)
    {
    	find effectiveJudgement_object_delegation_allow(user, object, operation);
    	access == AccessibilityLevel::ALLOW;
    }
    
    �generateEffectiveJudgement_object_delegation_allow(model)�
    '''
    
    def generateEffectiveJudgement_object_delegation_allow(DelegationModel model) '''
    pattern effectiveJudgement_object_delegation_allow(user: java String, object: EObject, operation)
    {
    �IF !delegationsObjectAllow.empty�
    	find delegationJudgement_object_allow(user, object, operation);
    } or {
    �ENDIF�
    	find strongConsequenceJudgement_object_delegation_allow(user, object, operation);
    }
    '''
    
    def generateEffectiveJudgement_object_allow(AccessControlModel acModel, TreeSet<Integer> priorities) '''
    pattern effectiveJudgement_object_allow(user: java String, object: EObject, priority: java Integer, operation, access)
    {
    �IF acModel.policy.access == AccessibilityLevel.ALLOW�
    	find explicitJudgement_object_allow(user, object, operation, eval(-1));
    	access == AccessibilityLevel::ALLOW;
    	neg find dominationByPriority_object_default(user, object, operation);
    	priority == eval(-1);
    } or {
    �ENDIF�
        find effectiveJudgement_object_weak_allow(user, object, operation);
        access == AccessibilityLevel::ALLOW;
        priority == 0;
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {"�
           find effectiveJudgement_object_�prio�_allow(user, object, operation);
           access == AccessibilityLevel::ALLOW;
           priority == �prio�;
        �ENDFOR�
    } or {
    	find effectiveJudgement_object_delegation_allow(user, object, operation);
    	access == AccessibilityLevel::ALLOW;
    	priority == 1000;
    }   
    '''
    
    
    def generateEffectiveJudgement_attribute(AccessControlModel acModel, TreeSet<Integer> priorities, DelegationModel delegationModel) '''
    pattern effectiveJudgement_attribute(user: java String, source: EObject, value: java Object, attribute : java String, priority: java Integer, operation, access)
    {
        find effectiveJudgement_attribute_default(user, source, value, attribute, operation, access);
        priority == eval(-1);
    } or {
        find effectiveJudgement_attribute_weak(user, source, value, attribute, operation, access);
        priority == 0;
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {"�
           find effectiveJudgement_attribute_�prio�(user, source, value, attribute, operation, access);
           priority == �prio�;
        �ENDFOR�
    } or {
        find effectiveJudgement_attribute_delegation(user, source, value, attribute, operation, access);
        priority == 1000;
    }
        
    �generateEffectiveJudgement_attribute_default(acModel)�
    
    �generateEffectiveJudgement_attribute_weak(acModel)�
    
    �generateEffectiveJudgement_attribute_priority(acModel, priorities)�
    
    �generateEffectiveJudgement_attribute_delegation(delegationModel)�
    
    �generateEffectiveJudgement_attribute_allow(acModel, priorities)�
    '''
    
    def generateEffectiveJudgement_attribute_default(AccessControlModel model) '''
    pattern effectiveJudgement_attribute_default(user: java String, source: EObject, value: java Object, attribute : java String, operation, access)
    {
    	�IF model.policy.access == AccessibilityLevel.ALLOW�
    	    find explicitJudgement_attribute_allow(user, source, value, attribute, operation, eval(-1));
    	    access == AccessibilityLevel::ALLOW;
    	�ENDIF�
    	�IF model.policy.access == AccessibilityLevel.DENY�
    	    find explicitJudgement_attribute_deny(user, source, value, attribute, operation, eval(-1));
    	    access == AccessibilityLevel::DENY;
    	�ENDIF�
    	neg find dominationByPriority_attribute_default(user, source, value, attribute, operation);
    }
    '''
    
    def generateEffectiveJudgement_attribute_weak(AccessControlModel model) '''
    pattern effectiveJudgement_attribute_weak(user: java String, source: EObject, value: java Object, attribute : java String, operation, access)
    {
    	find effectiveJudgement_attribute_weak_allow(user, source, value, attribute, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_attribute_weak_deny(user, source, value, attribute, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    �generateEffectiveJudgement_attribute_weak_allow(model)�
    
    �generateEffectiveJudgement_attribute_weak_deny(model)�
    '''
    
    def generateEffectiveJudgement_attribute_weak_allow(AccessControlModel model) '''
    pattern effectiveJudgement_attribute_weak_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
    	find judgement_attribute_weak_allow(user, source, value, attribute, operation);
        neg find dominationByPriority_attribute_weak(user, source, value, attribute, operation);
        �IF model.policy.resolution != ResolutionType.PERMISSIVE�
            neg find dominationByAccess_attribute_weak(user, source, value, attribute, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_attribute_weak_deny(AccessControlModel model) '''
    pattern effectiveJudgement_attribute_weak_deny(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        find judgement_attribute_weak_deny(user, source, value, attribute, operation);
        neg find dominationByPriority_attribute_weak(user, source, value, attribute, operation);
        �IF model.policy.resolution != ResolutionType.RESTRICTIVE�
            neg find dominationByAccess_attribute_weak(user, source, value, attribute, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_attribute_priority(AccessControlModel model, TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    pattern effectiveJudgement_attribute_�prio�(user: java String, source: EObject, value: java Object, attribute : java String, operation, access)
    {
    	find effectiveJudgement_attribute_�prio�_allow(user, source, value, attribute, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_attribute_�prio�_deny(user, source, value, attribute, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    �generateEffectiveJudgement_attribute_priority_allow(model, priorities, prio)�
            
    �generateEffectiveJudgement_attribute_priority_deny(model, priorities, prio)�
    �ENDFOR�
    '''
    
    def generateEffectiveJudgement_attribute_priority_allow(AccessControlModel model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_attribute_�prio�_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        find judgement_attribute_�prio�_allow(user, source, value, attribute, operation);
        neg find dominationByPriority_attribute_�prio�(user, source, value, attribute, operation);
        �IF model.policy.resolution != ResolutionType.PERMISSIVE�
            neg find dominationByAccess_attribute_�prio�(user, source, value, attribute, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_attribute_priority_deny(AccessControlModel model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_attribute_�prio�_deny(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        find judgement_attribute_�prio�_deny(user, source, value, attribute, operation);
        neg find dominationByPriority_attribute_�prio�(user, source, value, attribute, operation);
        �IF model.policy.resolution != ResolutionType.RESTRICTIVE�
            neg find dominationByAccess_attribute_�prio�(user, source, value, attribute, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_attribute_delegation(DelegationModel model) '''
    pattern effectiveJudgement_attribute_delegation(user: java String, source: EObject, value: java Object, attribute : java String, operation, access)
    {
    	find effectiveJudgement_attribute_delegation_allow(user, source, value, attribute, operation);
    	access == AccessibilityLevel::ALLOW;
    }
    
    �generateEffectiveJudgement_attribute_delegation_allow(model)�
    '''
    
    def generateEffectiveJudgement_attribute_delegation_allow(DelegationModel model) '''
    pattern effectiveJudgement_attribute_delegation_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
    �IF !delegationsAttributeAllow.empty�
    	find delegationJudgement_attribute_allow(user, source, value, attribute, operation);
    } or {
    �ENDIF�
    	find strongConsequenceJudgement_attribute_delegation_allow(user, source, value, attribute, operation);
    }
    '''
    
    def generateEffectiveJudgement_attribute_allow(AccessControlModel acModel, TreeSet<Integer> priorities) '''
    pattern effectiveJudgement_attribute_allow(user: java String, source: EObject, value: java Object, attribute : java String, priority: java Integer, operation, access)
    {
    �IF acModel.policy.access == AccessibilityLevel.ALLOW�
    	find explicitJudgement_attribute_allow(user, source, value, attribute, operation, eval(-1));
    	access == AccessibilityLevel::ALLOW;
    	neg find dominationByPriority_attribute_default(user, source, value, attribute, operation);
    	priority == eval(-1);
    } or {
    �ENDIF�
        find effectiveJudgement_attribute_weak_allow(user, source, value, attribute, operation);
        access == AccessibilityLevel::ALLOW;
        priority == 0;
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {"�
           find effectiveJudgement_attribute_�prio�_allow(user, source, value, attribute, operation);
           access == AccessibilityLevel::ALLOW;
           priority == �prio�;
        �ENDFOR�
    } or {
    	find effectiveJudgement_attribute_delegation_allow(user, source, value, attribute, operation);
    	access == AccessibilityLevel::ALLOW;
    	priority == 1000;
    }   
    '''
    
    
    def generateEffectiveJudgement_reference(AccessControlModel acModel, TreeSet<Integer> priorities, DelegationModel delegationModel) '''
    pattern effectiveJudgement_reference(user: java String, source: EObject, target: EObject, reference: java String, priority: java Integer, operation, access)
    {
        find effectiveJudgement_reference_default(user, source, target, reference, operation, access);
        priority == eval(-1);
    } or {
        find effectiveJudgement_reference_weak(user, source, target, reference, operation, access);
        priority == 0;
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {"�
           find effectiveJudgement_reference_�prio�(user, source, target, reference, operation, access);
           priority == �prio�;
        �ENDFOR�
    } or {
    	find effectiveJudgement_reference_delegation(user, source, target, reference, operation, access);
    	priority == 1000;
    }
    �generateEffectiveJudgement_reference_default(acModel)�
    
    �generateEffectiveJudgement_reference_weak(acModel)�
    
    �generateEffectiveJudgement_reference_priority(acModel, priorities)�
    
    �generateEffectiveJudgement_reference_delegation(delegationModel)�
    
    �generateEffectiveJudgement_reference_allow(acModel, priorities)�
    '''
    
    def generateEffectiveJudgement_reference_default(AccessControlModel model) '''
    pattern effectiveJudgement_reference_default(user: java String, source: EObject, target: EObject, reference: java String, operation, access)
    {
        �IF model.policy.access == AccessibilityLevel.ALLOW�
            find explicitJudgement_reference_allow(user, source, target, reference, operation, eval(-1));
            access == AccessibilityLevel::ALLOW;
        �ENDIF�
        �IF model.policy.access == AccessibilityLevel.DENY�
            find explicitJudgement_reference_deny(user, source, target, reference, operation, eval(-1));
            access == AccessibilityLevel::DENY;
        �ENDIF�
        neg find dominationByPriority_reference_default(user, source, target, reference, operation);
    }
    '''
    
    def generateEffectiveJudgement_reference_weak(AccessControlModel model) '''
    pattern effectiveJudgement_reference_weak(user: java String, source: EObject, target: EObject, reference: java String, operation, access)
    {
    	find effectiveJudgement_reference_weak_allow(user, source, target, reference, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_reference_weak_deny(user, source, target, reference, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    �generateEffectiveJudgement_reference_weak_allow(model)�
    
    �generateEffectiveJudgement_reference_weak_deny(model)�
    '''
    
    def generateEffectiveJudgement_reference_weak_allow(AccessControlModel model) '''
    pattern effectiveJudgement_reference_weak_allow(user: java String, source: EObject, target: EObject, reference: java String, operation)
    {
    	find judgement_reference_weak_allow(user, source, target, reference, operation);
        neg find dominationByPriority_reference_weak(user, source, target, reference, operation);
        �IF model.policy.resolution != ResolutionType.PERMISSIVE�
            neg find dominationByAccess_reference_weak(user, source, target, reference, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_reference_weak_deny(AccessControlModel model) '''
    pattern effectiveJudgement_reference_weak_deny(user: java String, source: EObject, target: EObject, reference: java String, operation)
    {
        find judgement_reference_weak_deny(user, source, target, reference, operation);
        neg find dominationByPriority_reference_weak(user, source, target, reference, operation);
        �IF model.policy.resolution != ResolutionType.RESTRICTIVE�
            neg find dominationByAccess_reference_weak(user, source, target, reference, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_reference_priority(AccessControlModel model, TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    pattern effectiveJudgement_reference_�prio�(user: java String, source: EObject, target: EObject, reference: java String, operation, access)
    {
    	find effectiveJudgement_reference_�prio�_allow(user, source, target, reference, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_reference_�prio�_deny(user, source, target, reference, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    �generateEffectiveJudgement_reference_priority_allow(model, priorities, prio)�
            
    �generateEffectiveJudgement_reference_priority_deny(model, priorities, prio)�
    �ENDFOR�
    '''
    
    def generateEffectiveJudgement_reference_priority_allow(AccessControlModel model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_reference_�prio�_allow(user: java String, source: EObject, target: EObject, reference: java String, operation)
    {
        find judgement_reference_�prio�_allow(user, source, target, reference, operation);
        neg find dominationByPriority_reference_�prio�(user, source, target, reference, operation);
        �IF model.policy.resolution != ResolutionType.PERMISSIVE�
            neg find dominationByAccess_reference_�prio�(user, source, target, reference, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_reference_priority_deny(AccessControlModel model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_reference_�prio�_deny(user: java String, source: EObject, target: EObject, reference: java String, operation)
    {
        find judgement_reference_�prio�_deny(user, source, target, reference, operation);
        neg find dominationByPriority_reference_�prio�(user, source, target, reference, operation);
        �IF model.policy.resolution != ResolutionType.RESTRICTIVE�
            neg find dominationByAccess_reference_�prio�(user, source, target, reference, operation);
        �ENDIF�
    }
    '''
    
    def generateEffectiveJudgement_reference_delegation(DelegationModel model) '''
    pattern effectiveJudgement_reference_delegation(user: java String, source: EObject, target: EObject, reference: java String, operation, access)
    {
    	find effectiveJudgement_reference_delegation_allow(user, source, target, reference, operation);
    	access == AccessibilityLevel::ALLOW;
    }
    
    �generateEffectiveJudgement_reference_delegation_allow(model)�
    '''
    
    def generateEffectiveJudgement_reference_delegation_allow(DelegationModel model) '''
    pattern effectiveJudgement_reference_delegation_allow(user: java String, source: EObject, target: EObject, reference: java String, operation)
    {
    �IF !delegationsReferenceAllow.empty�
    	find delegationJudgement_reference_allow(user, source, target, reference, operation);
    } or {
    �ENDIF�
    	find strongConsequenceJudgement_reference_delegation_allow(user, source, target, reference, operation);
    }
    '''
    
    def generateEffectiveJudgement_reference_allow(AccessControlModel acModel, TreeSet<Integer> priorities) '''
    pattern effectiveJudgement_reference_allow(user: java String, source: EObject, target: EObject, reference: java String, priority: java Integer, operation, access)
    {
    �IF acModel.policy.access == AccessibilityLevel.ALLOW�
    	find explicitJudgement_reference_allow(user, source, target, reference, operation, eval(-1));
    	access == AccessibilityLevel::ALLOW;
    	neg find dominationByPriority_reference_default(user, source, target, reference, operation);
    	priority == eval(-1);
    } or {
    �ENDIF�
        find effectiveJudgement_reference_weak_allow(user, source, target, reference, operation);
        access == AccessibilityLevel::ALLOW;
        priority == 0;
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {"�
           find effectiveJudgement_reference_�prio�_allow(user, source, target, reference, operation);
           access == AccessibilityLevel::ALLOW;
           priority == �prio�;
        �ENDFOR�
    } or {
    	find effectiveJudgement_reference_delegation_allow(user, source, target, reference, operation);
    	access == AccessibilityLevel::ALLOW;
    	priority == 1000;
    }   
    '''
    
    
    def generateDominationByPriority_object(TreeSet<Integer> priorities) '''
    �generateDominationByPriority_object_default(priorities)�
    
    �generateDominationByPriority_object_weak(priorities)�
    
    �generateDominationByPriority_object_priority(priorities)�
    '''
    
    def generateDominationByPriority_object_default(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_object_default(user: java String, object: EObject, operation)
    {
        find effectiveJudgement_object_weak(user, object, operation, _access);
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {" �
            find effectiveJudgement_object_�prio�(user, object, operation, _access);
        �ENDFOR�
    } or {
    	find effectiveJudgement_object_delegation(user, object, operation, _access);
    }
    '''
    
    def generateDominationByPriority_object_weak(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_object_weak(user: java String, object: EObject, operation)
    {
        �FOR prio: priorities SEPARATOR "\n} or {" �
            find effectiveJudgement_object_�prio�(user, object, operation, _access);
        �ENDFOR�
    } or {
    	find effectiveJudgement_object_delegation(user, object, operation, _access);
    }
    '''
    
    def generateDominationByPriority_object_priority(TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    pattern dominationByPriority_object_�prio�(user: java String, object: EObject, operation) 
    {
        �FOR prevailingPrio: priorities.filter[it > prio] SEPARATOR "\n} or {" AFTER "\n} or {"�
        find effectiveJudgement_object_�prevailingPrio�(user, object, operation, _access);
        �ENDFOR�
    	find effectiveJudgement_object_delegation(user, object, operation, _access);
    }
    �ENDFOR�
    '''
    
    
    def generateDominationByPriority_attribute(TreeSet<Integer> priorities) '''
    �generateDominationByPriority_attribute_default(priorities)�
    
    �generateDominationByPriority_attribute_weak(priorities)�
    
    �generateDominationByPriority_attribute_priority(priorities)�
    '''
    
    def generateDominationByPriority_attribute_default(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_attribute_default(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        find effectiveJudgement_attribute_weak(user, source, value, attribute, operation, _access);
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {" �
            find effectiveJudgement_attribute_�prio�(user, source, value, attribute, operation, _access);
        �ENDFOR�
    } or {
    	find effectiveJudgement_attribute_delegation(user, source, value, attribute, operation, _access);
    }
    '''
    
    def generateDominationByPriority_attribute_weak(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_attribute_weak(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        �FOR prio: priorities SEPARATOR "\n} or {" �
            find effectiveJudgement_attribute_�prio�(user, source, value, attribute, operation, _access);
        �ENDFOR�
    } or {
    	find effectiveJudgement_attribute_delegation(user, source, value, attribute, operation, _access);
    }
    '''
    
    def generateDominationByPriority_attribute_priority(TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    pattern dominationByPriority_attribute_�prio�(user: java String, source: EObject, value: java Object, attribute : java String, operation) 
    {
        �FOR prevailingPrio: priorities.filter[it > prio] SEPARATOR "\n} or {" AFTER "\n} or {"�
        find effectiveJudgement_attribute_�prevailingPrio�(user, source, value, attribute, operation, _access);
        �ENDFOR�
    	find effectiveJudgement_attribute_delegation(user, source, value, attribute, operation, _access);
    }
    �ENDFOR�
    '''
    
    
    def generateDominationByPriority_reference(TreeSet<Integer> priorities) '''
    �generateDominationByPriority_reference_default(priorities)�
    
    �generateDominationByPriority_reference_weak(priorities)�
    
    �generateDominationByPriority_reference_priority(priorities)�
    '''
    
    def generateDominationByPriority_reference_default(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_reference_default(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        find effectiveJudgement_reference_weak(user, source, target, reference, operation, _access);
    } or {
        �FOR prio: priorities SEPARATOR "\n} or {" �
            find effectiveJudgement_reference_�prio�(user, source, target, reference, operation, _access);
        �ENDFOR�
    } or {
    	find effectiveJudgement_reference_delegation(user, source, target, reference, operation, _access);
    }
    '''
    
    def generateDominationByPriority_reference_weak(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_reference_weak(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        �FOR prio: priorities SEPARATOR "\n} or {" �
            find effectiveJudgement_reference_�prio�(user, source, target, reference, operation, _access);
        �ENDFOR�
    } or {
    	find effectiveJudgement_reference_delegation(user, source, target, reference, operation, _access);
    }
    '''
    
    def generateDominationByPriority_reference_priority(TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    pattern dominationByPriority_reference_�prio�(user: java String, source: EObject, target: EObject, reference : java String, operation) 
    {
        �FOR prevailingPrio: priorities.filter[it > prio] SEPARATOR "\n} or {" AFTER "\n} or {"�
        find effectiveJudgement_reference_�prevailingPrio�(user, source, target, reference, operation, _access);
        �ENDFOR�
    	find effectiveJudgement_reference_delegation(user, source, target, reference, operation, _access);
    }
    �ENDFOR�
    '''
    
    def generateDominationByAccess_object(AccessControlModel model, TreeSet<Integer> priorities) '''
    �generateDominationByAccess_object_weak(model)�
        
    �generateDominationByAccess_object_priority(model, priorities)�
    '''
    
    def generateDominationByAccess_object_weak(AccessControlModel model) '''
    pattern dominationByAccess_object_weak(user: java String, object: EObject, operation)
    {
    	�IF model.policy.resolution == ResolutionType.PERMISSIVE�
    	    find judgement_object_weak_allow(user, object, operation);
    	�ENDIF�
    	�IF model.policy.resolution == ResolutionType.RESTRICTIVE�
    	    find judgement_object_weak_deny(user, object, operation);
    	�ENDIF�
    }
    '''
    
    def generateDominationByAccess_object_priority(AccessControlModel model, TreeSet<Integer> priorities) '''
    �FOR prio : priorities�
    pattern dominationByAccess_object_�prio�(user: java String, object: EObject, operation)
    {
        �IF model.policy.resolution == ResolutionType.PERMISSIVE�
            find judgement_object_�prio�_allow(user, object, operation);
        �ENDIF�
        �IF model.policy.resolution == ResolutionType.RESTRICTIVE�
            find judgement_object_�prio�_deny(user, object, operation);
        �ENDIF�
    }
    �ENDFOR�
    '''
    
    
    def generateDominationByAccess_attribute(AccessControlModel model, TreeSet<Integer> priorities) '''
    �generateDominationByAccess_attribute_weak(model)�
            
    �generateDominationByAccess_attribute_priority(model, priorities)�
    '''
        
    def generateDominationByAccess_attribute_weak(AccessControlModel model) '''
    pattern dominationByAccess_attribute_weak(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        �IF model.policy.resolution == ResolutionType.PERMISSIVE�
        	find judgement_attribute_weak_allow(user, source, value, attribute, operation);
        �ENDIF�
        �IF model.policy.resolution == ResolutionType.RESTRICTIVE�
        	find judgement_attribute_weak_deny(user, source, value, attribute, operation);
        �ENDIF�
    }
    '''
        
    def generateDominationByAccess_attribute_priority(AccessControlModel model, TreeSet<Integer> priorities) '''
    �FOR prio : priorities�
    pattern dominationByAccess_attribute_�prio�(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        �IF model.policy.resolution == ResolutionType.PERMISSIVE�
            find judgement_attribute_�prio�_allow(user, source, value, attribute, operation);
        �ENDIF�
        �IF model.policy.resolution == ResolutionType.RESTRICTIVE�
            find judgement_attribute_�prio�_deny(user, source, value, attribute, operation);
        �ENDIF�
    }
    �ENDFOR�
    '''
    
    
    def generateDominationByAccess_reference(AccessControlModel model, TreeSet<Integer> priorities) '''
    �generateDominationByAccess_reference_weak(model)�
                
    �generateDominationByAccess_reference_priority(model, priorities)�
    '''
            
    def generateDominationByAccess_reference_weak(AccessControlModel model) '''
    pattern dominationByAccess_reference_weak(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        �IF model.policy.resolution == ResolutionType.PERMISSIVE�
            find judgement_reference_weak_allow(user, source, target, reference, operation);
        �ENDIF�
        �IF model.policy.resolution == ResolutionType.RESTRICTIVE�
            find judgement_reference_weak_deny(user, source, target, reference, operation);
        �ENDIF�
    }
    '''
            
    def generateDominationByAccess_reference_priority(AccessControlModel model, TreeSet<Integer> priorities) '''
    �FOR prio : priorities�
    pattern dominationByAccess_reference_�prio�(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        �IF model.policy.resolution == ResolutionType.PERMISSIVE�
            find judgement_reference_�prio�_allow(user, source, target, reference, operation);
        �ENDIF�
        �IF model.policy.resolution == ResolutionType.RESTRICTIVE�
            find judgement_reference_�prio�_deny(user, source, target, reference, operation);
        �ENDIF�
    }
    �ENDFOR�
    '''
    
    def generateJudgement_object(TreeSet<Integer> priorities) '''
    �generateJudgement_object_weak�
    
    �generateJudgement_object_priority(priorities)�
    '''
    
    def generateJudgement_object_weak() '''
    �generateJudgement_object_weak_allow�
    
    �generateJudgement_object_weak_deny�
    '''
    
    def generateJudgement_object_weak_allow() '''
    pattern judgement_object_weak_allow(user: java String, object: EObject, operation)
    {
        find strongConsequenceJudgement_object_weak_allow(user, object, operation);
    }
    '''
    
    def generateJudgement_object_weak_deny() '''
    pattern judgement_object_weak_deny(user: java String, object: EObject, operation)
    {
        find strongConsequenceJudgement_object_weak_deny(user, object, operation);
    }
    '''
    
    def generateJudgement_object_priority(TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
        �generateJudgement_object_priority_allow(prio)�
        
        �generateJudgement_object_priority_deny(prio)�
    �ENDFOR�
    '''
    
    def generateJudgement_object_priority_allow(Integer prio) '''
    pattern judgement_object_�prio�_allow(user: java String, object: EObject, operation)
    {
    	�IF !explicitRulesObjectAllow.empty�
    	find explicitJudgement_object_allow(user, object, operation, �prio�);
    	} or {
    	�ENDIF�
    	find strongConsequenceJudgement_object_�prio�_allow(user, object, operation);
    }
    '''
    
    def generateJudgement_object_priority_deny(Integer prio) '''
    pattern judgement_object_�prio�_deny(user: java String, object: EObject, operation)
    {
    �IF !explicitRulesObjectDeny.empty�
    	find explicitJudgement_object_deny(user, object, operation, �prio�);
    	} or {
    �ENDIF�
        find strongConsequenceJudgement_object_�prio�_deny(user, object, operation);
    }
    '''
    
    
    def generateJudgement_attribute(TreeSet<Integer> priorities) '''
    �generateJudgement_attribute_weak�
    
    �generateJudgement_attribute_priority(priorities)�
    '''
    
    def generateJudgement_attribute_weak() '''
    �generateJudgement_attribute_weak_allow�
        
    �generateJudgement_attribute_weak_deny�
    '''
    
    def generateJudgement_attribute_weak_allow() '''
    pattern judgement_attribute_weak_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        find strongConsequenceJudgement_attribute_weak_allow(user, source, value, attribute, operation);
    } or {
        find weakConsequenceJudgement_attribute_allow(user, source, value, attribute, operation);
    }
    '''
    
    def generateJudgement_attribute_weak_deny() '''
    pattern judgement_attribute_weak_deny(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        find strongConsequenceJudgement_attribute_weak_deny(user, source, value, attribute, operation);
    } or {
        find weakConsequenceJudgement_attribute_deny(user, source, value, attribute, operation);
    }
    '''
    
    def generateJudgement_attribute_priority(TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
        �generateJudgement_attribute_priority_allow(prio)�
            
        �generateJudgement_attribute_priority_deny(prio)�
    �ENDFOR�
    '''
    
    def generateJudgement_attribute_priority_allow(Integer prio) '''
    pattern judgement_attribute_�prio�_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
    	�IF !explicitRulesAttributeAllow.empty�
    	find explicitJudgement_attribute_allow(user, source, value, attribute, operation, �prio�);
    	} or {
    	�ENDIF�
    	find strongConsequenceJudgement_attribute_�prio�_allow(user, source, value, attribute, operation);
    }
    '''
    
    def generateJudgement_attribute_priority_deny(Integer prio) '''
    pattern judgement_attribute_�prio�_deny(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
    	�IF !explicitRulesAttributeDeny.empty�
    	find explicitJudgement_attribute_deny(user, source, value, attribute, operation, �prio�);
    	} or {
    	�ENDIF�
        find strongConsequenceJudgement_attribute_�prio�_deny(user, source, value, attribute, operation);
    }
    '''
    
    
    def generateJudgement_reference(TreeSet<Integer> priorities) '''
    �generateJudgement_reference_weak�
    
    �generateJudgement_reference_priority(priorities)�
    '''
    
    def generateJudgement_reference_weak() '''
    �generateJudgement_reference_weak_allow�
            
    �generateJudgement_reference_weak_deny�
    '''
    
    def generateJudgement_reference_weak_allow() '''
    pattern judgement_reference_weak_allow(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        find strongConsequenceJudgement_reference_weak_allow(user, source, target, reference, operation);
    } or {
        find weakConsequenceJudgement_reference_allow(user, source, target, reference, operation);
    }
    '''
    
    def generateJudgement_reference_weak_deny() '''
    pattern judgement_reference_weak_deny(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        find strongConsequenceJudgement_reference_weak_deny(user, source, target, reference, operation);
    } or {
        find weakConsequenceJudgement_reference_deny(user, source, target, reference, operation);
    }
    '''
    
    def generateJudgement_reference_priority(TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
        �generateJudgement_reference_priority_allow(prio)�
            
        �generateJudgement_reference_priority_deny(prio)�
    �ENDFOR�
    '''

    def generateJudgement_reference_priority_allow(Integer prio) '''
    pattern judgement_reference_�prio�_allow(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
    	�IF !explicitRulesReferenceAllow.empty�
    	find explicitJudgement_reference_allow(user, source, target, reference, operation, �prio�);
    	} or {
    	�ENDIF�
    	find strongConsequenceJudgement_reference_�prio�_allow(user, source, target, reference, operation);
    }
    '''
    
    def generateJudgement_reference_priority_deny(Integer prio) '''
    pattern judgement_reference_�prio�_deny(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
    	�IF !explicitRulesReferenceDeny.empty�
    	find explicitJudgement_reference_deny(user, source, target, reference, operation, �prio�);
    	} or {
    	�ENDIF�
        find strongConsequenceJudgement_reference_�prio�_deny(user, source, target, reference, operation);
    }
    '''
    
    def generateStrongConsequenceJudgement_object(EPackage metamodel, TreeSet<Integer> priorities) '''
    �generateStrongConsequenceJudgement_object_weak(metamodel)�
    
    �generateStrongConsequenceJudgement_object_priority(metamodel, priorities)�
    
    �generateStrongConsequenceJudgement_object_delegation()�
    '''
    
    def generateStrongConsequenceJudgement_object_weak(EPackage metamodel) '''
    �generateStrongConsequenceJudgement_object_weak_allow�
    
    �generateStrongConsequenceJudgement_object_weak_deny(metamodel)�
    '''
    
    def generateStrongConsequenceJudgement_object_weak_allow() '''
    pattern strongConsequenceJudgement_object_weak_allow(user: java String, object: EObject, operation)
    {
        // object W -> object R
        find effectiveJudgement_object_weak_allow(user, object, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// child R -> parent R
    	find effectiveJudgement_object_weak_allow(user, child, OperationType::READ);
    	find contains(object, child);
    	operation == OperationType::READ;
    } or {
    	// attribute R -> source R
    	find effectiveJudgement_attribute_weak_allow(user, object, _value, _attribute, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// reference R -> source R
    	find effectiveJudgement_reference_weak_allow(user, object, _target, _reference, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// reference R -> target R
    	find effectiveJudgement_reference_weak_allow(user, _source, object, _reference, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// containment reference W -> target W
    	find effectiveJudgement_reference_weak_allow(user, anySource, object, anyReference, OperationType::WRITE);
    	find containmentReference(anySource, object, anyReference);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_object_weak_deny(EPackage metamodel) '''
    pattern strongConsequenceJudgement_object_weak_deny(user: java String, object: EObject, operation)
    {
        // object !R -> object !W
        find effectiveJudgement_object_weak_deny(user, object, OperationType::READ);
        operation == OperationType::WRITE;
    }�IF metamodel.EClassifiers.filter(EClass).exists[x | x.EAttributes.exists[y | y.ID]]�or {
        // ID attribute !R -> source !R
        find effectiveJudgement_attribute_weak_deny(user, object, anyValue, anyAttribute, OperationType::READ);
        find idAttribute(object, anyValue, anyAttribute);
        operation == OperationType::READ;
    }�ENDIF� or {
        // deny R, containment reference -> target
        find effectiveJudgement_reference_weak_deny(user, anySource, object, anyReference, OperationType::READ);
        find containmentReference(anySource, object, anyReference);
        operation == OperationType::READ;
    }
    '''
    
    def generateStrongConsequenceJudgement_object_priority(EPackage metamodel, TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    �generateStrongConsequenceJudgement_object_priority_allow(prio)�
    
    �generateStrongConsequenceJudgement_object_priority_deny(metamodel, prio)�
    �ENDFOR�
    '''
    
    def generateStrongConsequenceJudgement_object_priority_allow(Integer prio) '''
    pattern strongConsequenceJudgement_object_�prio�_allow(user: java String, object: EObject, operation)
    {
        // object W -> object R
        find effectiveJudgement_object_�prio�_allow(user, object, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// child R -> parent R
    	find effectiveJudgement_object_�prio�_allow(user, child, OperationType::READ);
    	find contains(object, child);
    	operation == OperationType::READ;
    } or {
    	// attribute R -> source R
    	find effectiveJudgement_attribute_�prio�_allow(user, object, _value, _attribute, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// reference R -> source R
    	find effectiveJudgement_reference_�prio�_allow(user, object, _target, _reference, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// reference R -> target R
    	find effectiveJudgement_reference_�prio�_allow(user, _source, object, _reference, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// containment reference W -> target W
    	find effectiveJudgement_reference_�prio�_allow(user, anySource, object, anyReference, OperationType::WRITE);
    	find containmentReference(anySource, object, anyReference);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_object_priority_deny(EPackage metamodel, Integer prio) '''
    pattern strongConsequenceJudgement_object_�prio�_deny(user: java String, object: EObject, operation)
    {
        // object !R -> object !W
        find effectiveJudgement_object_�prio�_deny(user, object, OperationType::READ);
        operation == OperationType::WRITE;
    }�IF metamodel.EClassifiers.filter(EClass).exists[x | x.EAttributes.exists[y | y.ID]]� or {
        // ID attribute !R -> source !R
        find effectiveJudgement_attribute_�prio�_deny(user, object, anyValue, anyAttribute, OperationType::READ);
        find idAttribute(object, anyValue, anyAttribute);
        operation == OperationType::READ;
    }�ENDIF� or {
        // deny R, containment reference -> target
        find effectiveJudgement_reference_�prio�_deny(user, anySource, object, anyReference, OperationType::READ);
        find containmentReference(anySource, object, anyReference);
        operation == OperationType::READ;
    }
    '''
    
    def generateStrongConsequenceJudgement_object_delegation() '''
    �generateStrongConsequenceJudgement_object_delegation_allow�
    '''
    
    def generateStrongConsequenceJudgement_object_delegation_allow() '''
    pattern strongConsequenceJudgement_object_delegation_allow(user: java String, object: EObject, operation)
    {
        // object W -> object R
        find effectiveJudgement_object_delegation_allow(user, object, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
        // child R -> parent R
        find effectiveJudgement_object_delegation_allow(user, child, OperationType::READ);
        find contains(object, child);
        operation == OperationType::READ;
    } or {
        // attribute R -> source R
        find effectiveJudgement_attribute_delegation_allow(user, object, _value, _attribute, OperationType::READ);
        operation == OperationType::READ;
    } or {
        // reference R -> source R
        find effectiveJudgement_reference_delegation_allow(user, object, _target, _reference, OperationType::READ);
        operation == OperationType::READ;
    } or {
        // reference R -> target R
        find effectiveJudgement_reference_delegation_allow(user, _source, object, _reference, OperationType::READ);
        operation == OperationType::READ;
    } or {
        // containment reference W -> target W
        find effectiveJudgement_reference_delegation_allow(user, anySource, object, anyReference, OperationType::WRITE);
        find containmentReference(anySource, object, anyReference);
        operation == OperationType::WRITE;
    }
    '''
    
    
    def generateStrongConsequenceJudgement_attribute(EPackage metamodel, TreeSet<Integer> priorities) '''
    �generateStrongConsequenceJudgement_attribute_weak(metamodel)�
        
    �generateStrongConsequenceJudgement_attribute_priority(metamodel, priorities)�
    
    �generateStrongConsequenceJudgement_attribute_delegation(metamodel)�
    '''
    
    def generateStrongConsequenceJudgement_attribute_weak(EPackage metamodel) '''
    �generateStrongConsequenceJudgement_attribute_weak_allow(metamodel)�
    
    �generateStrongConsequenceJudgement_attribute_weak_deny�
    '''
    
    def generateStrongConsequenceJudgement_attribute_weak_allow(EPackage metamodel) '''
    pattern strongConsequenceJudgement_attribute_weak_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        // allow R, attribute W -> attribute R
        find effectiveJudgement_attribute_weak_allow(user, source, value, attribute, OperationType::WRITE);
        operation == OperationType::READ;
    }�IF metamodel.EClassifiers.filter(EClass).exists[x | x.EAttributes.exists[y | y.ID]]� or {
    	// object R -> ID attribute R
    	find effectiveJudgement_object_weak_allow(user, source, OperationType::READ);
    	find idAttribute(source, value, attribute);
    	operation == OperationType::READ;
    }�ENDIF�
    '''
    
    def generateStrongConsequenceJudgement_attribute_weak_deny() '''
    pattern strongConsequenceJudgement_attribute_weak_deny(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
    	// attribute !R -> attribute !W
    	find effectiveJudgement_attribute_weak_deny(user, source, value, attribute, OperationType::READ);
    	operation == OperationType::WRITE;
    } or {
    	// containment reference !W -> attribute !W
    	find effectiveJudgement_reference_weak_deny(user, anySource, source, anyReference, OperationType::WRITE);
    	find containmentReference(anySource, source, anyReference);
    	find attributeAsset(source, value, attribute);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_attribute_priority(EPackage metamodel, TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    �generateStrongConsequenceJudgement_attribute_priority_allow(metamodel, prio)�
    
    �generateStrongConsequenceJudgement_attribute_priority_deny(prio)�
    �ENDFOR�
    '''
    
    def generateStrongConsequenceJudgement_attribute_priority_allow(EPackage metamodel, Integer prio) '''
    pattern strongConsequenceJudgement_attribute_�prio�_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        // allow R, attribute W -> attribute R
        find effectiveJudgement_attribute_�prio�_allow(user, source, value, attribute, OperationType::WRITE);
        operation == OperationType::READ;
    }�IF metamodel.EClassifiers.filter(EClass).exists[x | x.EAttributes.exists[y | y.ID]]� or {
    	// object R -> ID attribute R
    	find effectiveJudgement_object_�prio�_allow(user, source, OperationType::READ);
    	find idAttribute(source, value, attribute);
    	operation == OperationType::READ;
    }�ENDIF�
    '''
    
    def generateStrongConsequenceJudgement_attribute_priority_deny(Integer prio) '''
    pattern strongConsequenceJudgement_attribute_�prio�_deny(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
    	// attribute !R -> attribute !W
    	find effectiveJudgement_attribute_�prio�_deny(user, source, value, attribute, OperationType::READ);
    	operation == OperationType::WRITE;
    } or {
    	// containment reference !W -> attribute !W
    	find effectiveJudgement_reference_�prio�_deny(user, anySource, source, anyReference, OperationType::WRITE);
    	find containmentReference(anySource, source, anyReference);
    	find attributeAsset(source, value, attribute);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_attribute_delegation(EPackage metamodel) '''
    �generateStrongConsequenceJudgement_attribute_delegation_allow(metamodel)�
    '''
    
    def generateStrongConsequenceJudgement_attribute_delegation_allow(EPackage metamodel) '''
    pattern strongConsequenceJudgement_attribute_delegation_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        // allow R, attribute W -> attribute R
        find effectiveJudgement_attribute_delegation_allow(user, source, value, attribute, OperationType::WRITE);
        operation == OperationType::READ;
    }�IF metamodel.EClassifiers.filter(EClass).exists[x | x.EAttributes.exists[y | y.ID]]� or {
        // object R -> ID attribute R
        find effectiveJudgement_object_delegation_allow(user, source, OperationType::READ);
        find idAttribute(source, value, attribute);
        operation == OperationType::READ;
    }�ENDIF�
    '''
    
    
    def generateStrongConsequenceJudgement_reference(EPackage metamodel, TreeSet<Integer> priorities) '''
    �generateStrongConsequenceJudgement_reference_weak(metamodel)�
        
    �generateStrongConsequenceJudgement_reference_priority(metamodel, priorities)�
    
    �generateStrongConsequenceJudgement_reference_delegation(metamodel)�
    '''
    
    def generateStrongConsequenceJudgement_reference_weak(EPackage metamodel) '''
    �generateStrongConsequenceJudgement_reference_weak_allow�
    
    �generateStrongConsequenceJudgement_reference_weak_deny(metamodel)�
    '''
    
    def generateStrongConsequenceJudgement_reference_weak_allow() '''
    pattern strongConsequenceJudgement_reference_weak_allow(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        // reference W -> reference R
        find effectiveJudgement_reference_weak_allow(user, source, target, reference, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// object R -> containment reference R
    	find effectiveJudgement_object_weak_allow(user, target, OperationType::READ);
    	find containmentReference(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object W -> containment reference W
        find effectiveJudgement_object_weak_allow(user, target, OperationType::WRITE);
    	find containmentReference(source, target, reference);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_reference_weak_deny(EPackage metamodel) '''
    pattern strongConsequenceJudgement_reference_weak_deny(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
    	// reference !R -> reference !W
    	find effectiveJudgement_reference_weak_deny(user, source, target, reference, OperationType::READ);
    	operation == OperationType::WRITE;
    } or {
    	// object !R -> incoming reference !R
    	find effectiveJudgement_object_weak_deny(user, target, OperationType::READ);
    	find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object !R -> outgoing reference !R
    	find effectiveJudgement_object_weak_deny(user, source, OperationType::READ);
    	find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    }�IF metamodel.EClassifiers.filter(EClass).exists[x | x.EAttributes.exists[y | y.ID]]� or {
    	// ID attribute !R -> source !R
    	find effectiveJudgement_attribute_weak_deny(user, target, anyValue, anyAttribute, OperationType::READ);
    	find idAttribute(target, anyValue, anyAttribute);
        find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    }�ENDIF�
    '''
    
    def generateStrongConsequenceJudgement_reference_priority(EPackage metamodel, TreeSet<Integer> priorities) '''
    �FOR prio: priorities�
    �generateStrongConsequenceJudgement_reference_priority_allow(prio)�
    
    �generateStrongConsequenceJudgement_reference_priority_deny(metamodel, prio)�
    �ENDFOR�
    '''
    
    def generateStrongConsequenceJudgement_reference_priority_allow(Integer prio) '''
    pattern strongConsequenceJudgement_reference_�prio�_allow(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        // reference W -> reference R
        find effectiveJudgement_reference_�prio�_allow(user, source, target, reference, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// object R -> containment reference R
    	find effectiveJudgement_object_�prio�_allow(user, target, OperationType::READ);
    	find containmentReference(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object W -> containment reference W
        find effectiveJudgement_object_�prio�_allow(user, target, OperationType::WRITE);
    	find containmentReference(source, target, reference);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_reference_priority_deny(EPackage metamodel, Integer prio) '''
    pattern strongConsequenceJudgement_reference_�prio�_deny(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
    	// reference !R -> reference !W
    	find effectiveJudgement_reference_�prio�_deny(user, source, target, reference, OperationType::READ);
    	operation == OperationType::WRITE;
    } or {
    	// object !R -> incoming reference !R
    	find effectiveJudgement_object_�prio�_deny(user, target, OperationType::READ);
    	find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object !R -> outgoing reference !R
    	find effectiveJudgement_object_�prio�_deny(user, source, OperationType::READ);
    	find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    }�IF metamodel.EClassifiers.filter(EClass).exists[x | x.EAttributes.exists[y | y.ID]]� or {
    	// ID attribute !R -> source !R
    	find effectiveJudgement_attribute_�prio�_deny(user, target, anyValue, anyAttribute, OperationType::READ);
    	find idAttribute(target, anyValue, anyAttribute);
        find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    }�ENDIF�
    '''
    
    def generateStrongConsequenceJudgement_reference_delegation(EPackage metamodel) '''
    �generateStrongConsequenceJudgement_reference_delegation_allow�
    '''
    
    def generateStrongConsequenceJudgement_reference_delegation_allow() '''
    pattern strongConsequenceJudgement_reference_delegation_allow(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        // reference W -> reference R
        find effectiveJudgement_reference_delegation_allow(user, source, target, reference, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// object R -> containment reference R
    	find effectiveJudgement_object_delegation_allow(user, target, OperationType::READ);
    	find containmentReference(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object W -> containment reference W
        find effectiveJudgement_object_delegation_allow(user, target, OperationType::WRITE);
    	find containmentReference(source, target, reference);
    	operation == OperationType::WRITE;
    }
    '''
    
    
    def generateWeakConsequenceJudgement_attribute(TreeSet<Integer> priorities) '''
    �generateWeakConsequenceJudgement_attribute_allow(priorities)�
    
    �generateWeakConsequenceJudgement_attribute_deny(priorities)�
    '''
    
    def generateWeakConsequenceJudgement_attribute_allow(TreeSet<Integer> priorities) '''
    pattern weakConsequenceJudgement_attribute_allow(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
    	find effectiveJudgement_object_weak_allow(user, source, operation);
    	find attributeAsset(source, value, attribute);
    } or {
        �FOR prio : priorities SEPARATOR "\n} or {"�
        find effectiveJudgement_object_�prio�_allow(user, source, operation);
        find attributeAsset(source, value, attribute);
        �ENDFOR�
    } or {
    	find effectiveJudgement_object_delegation_allow(user, source, operation);
    	find attributeAsset(source, value, attribute);
    }
    '''
    
    def generateWeakConsequenceJudgement_attribute_deny(TreeSet<Integer> priorities) '''
    pattern weakConsequenceJudgement_attribute_deny(user: java String, source: EObject, value: java Object, attribute : java String, operation)
    {
        find effectiveJudgement_object_weak_deny(user, source, operation);
        find attributeAsset(source, value, attribute);
    } or {
        �FOR prio : priorities SEPARATOR "\n} or {"�
        find effectiveJudgement_object_�prio�_deny(user, source, operation);
        find attributeAsset(source, value, attribute);
        �ENDFOR�
    }
    '''
    
    
    def generateWeakConsequenceJudgement_reference(TreeSet<Integer> priorities) '''
    �generateWeakConsequenceJudgement_reference_allow(priorities)�
        
    �generateWeakConsequenceJudgement_reference_deny(priorities)�
    '''
    
    def generateWeakConsequenceJudgement_reference_allow(TreeSet<Integer> priorities) '''
    pattern weakConsequenceJudgement_reference_allow(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
    	find effectiveJudgement_object_weak_allow(user, source, operation);
    	find referenceAsset(source, target, reference);
    } or {
        �FOR prio : priorities SEPARATOR "\n} or {"�
        find effectiveJudgement_object_�prio�_allow(user, source, operation);
        find referenceAsset(source, target, reference);
        �ENDFOR�
    } or {
    	find effectiveJudgement_object_delegation_allow(user, source, operation);
    	find referenceAsset(source, target, reference);
    }
    '''
    
    def generateWeakConsequenceJudgement_reference_deny(TreeSet<Integer> priorities) '''
    pattern weakConsequenceJudgement_reference_deny(user: java String, source: EObject, target: EObject, reference : java String, operation)
    {
        find effectiveJudgement_object_weak_deny(user, source, operation);
        find referenceAsset(source, target, reference);
    } or {
        �FOR prio : priorities SEPARATOR "\n} or {"�
        find effectiveJudgement_object_�prio�_deny(user, source, operation);
        find referenceAsset(source, target, reference);
        �ENDFOR�
    }
    '''

    def generateAssetHelperPattern(Rule rule) '''
    �IF rule.asset instanceof ObjectFact�
        �val object = rule.asset as ObjectFact�
        pattern �rule.name�RuleAsset(�object.variable.name� : EObject)
        {
            find �rule.pattern.qualifiedName�(�FOR bind: rule.bindList SEPARATOR ", " AFTER ");"��bind��ENDFOR�
        }
    �ENDIF�
    �IF rule.asset instanceof AttributeFact�
        �val attribute = rule.asset as AttributeFact�
        pattern �rule.name�RuleAsset(�attribute.variable.name� : EObject, value: java Object, attribute : java String)
        {
        	find �rule.pattern.qualifiedName�(�FOR bind: rule.bindList SEPARATOR ", " AFTER ");"��bind��ENDFOR�
        	find attributeAsset(�attribute.variable.name�, value, attribute);
        	attribute ==  "�attribute.attribute.name�";
        }
    �ENDIF�
    �IF rule.asset instanceof ReferenceFact�
        �val reference = rule.asset as ReferenceFact�
        pattern �rule.name�RuleAsset(�reference.sourceVar� : EObject, �reference.targetVar� : EObject, reference : java String)
        {
            find �rule.pattern.qualifiedName�(�FOR bind: rule.bindList SEPARATOR ", " AFTER ");"��bind��ENDFOR�
            find attributeAsset(�reference.sourceVar�, �reference.targetVar�, reference);
            reference = "�reference.reference.name�";
        }
    �ENDIF�
    '''
    
    def generateAssetHelperPattern(Delegation delegation) '''
    �IF delegation.asset instanceof ObjectFact�
        �val object = delegation.asset as ObjectFact�
        pattern �delegation.name�DelegationAsset(�object.variable.name� : EObject)
        {
            find �delegation.pattern.qualifiedName�(�FOR bind: getBindList(delegation) SEPARATOR ", " AFTER ");"��bind��ENDFOR�
        }
    �ENDIF�
    �IF delegation.asset instanceof AttributeFact�
        �val attribute = delegation.asset as AttributeFact�
        pattern �delegation.name�DelegationAsset(�attribute.variable.name� : EObject, value: java Object, attribute : java String)
        {
        	find �delegation.pattern.qualifiedName�(�FOR bind: getBindList(delegation) SEPARATOR ", " AFTER ");"��bind��ENDFOR�
        	find attributeAsset(�attribute.variable.name�, value, attribute);
        	attribute ==  "�attribute.attribute.name�";
        }
    �ENDIF�
    �IF delegation.asset instanceof ReferenceFact�
        �val reference = delegation.asset as ReferenceFact�
        pattern �delegation.name�DelegationAsset(�reference.sourceVar� : EObject, �reference.targetVar� : EObject, reference : java String)
        {
            find �delegation.pattern.qualifiedName�(�FOR bind: getBindList(delegation) SEPARATOR ", " AFTER ");"��bind��ENDFOR�
            find attributeAsset(�reference.sourceVar�, �reference.targetVar�, reference);
            reference = "�reference.reference.name�";
        }
    �ENDIF�
    '''
    
    def generateUserHelperPattern(Rule rule) '''
    pattern �rule.name�RuleUser(user: java String)
    {
    	�FOR user: getUsersOfRoleList(rule.roles) SEPARATOR "\n} or {" AFTER "}"�
    	user == "�user.name�";
    	�ENDFOR�
    '''
    
    def generateUserHelperPattern(Delegation delegation) '''
    pattern �delegation.name�DelegationUser(user: java String)
    {
    	�FOR user: getUsersOfRoleList(delegation.targets) SEPARATOR "\n} or {" AFTER "}"�
    	user == "�user.name�";
    	�ENDFOR�
    '''
    
    def generateOperationType(OperationType operation) '''
        �IF operation == OperationType.READWRITE�
        find readWriteOperation(operation);
        �ENDIF�
        �IF operation == OperationType.READ�
        operation == OperationType::READ;
        �ENDIF�
        �IF operation == OperationType.WRITE�
        operation == OperationType::WRITE;
        �ENDIF�
    '''

    def generateAccessibilityLevel(AccessibilityLevel access) '''
        �IF access == AccessibilityLevel.ALLOW�
        access == AccessibilityLevel::ALLOW;
        �ENDIF�
        �IF access == AccessibilityLevel.DENY�
        access == AccessibilityLevel::DENY;
        �ENDIF�
    '''

    def getBindList(Rule rule) {
		val bindList = new ArrayList<Object>();
		for (Variable parameter : rule.pattern.parameters) {
			bindList.add(getBindValue(parameter, rule.bindings, rule.asset));
		}
		return bindList;
	}
	
	def getBindList(Delegation delegation) {
		val bindList = new ArrayList<Object>();
		for (Variable parameter : delegation.pattern.parameters) {
			bindList.add(getBindValue(parameter, delegation.bindings, delegation.asset));
		}
		return bindList;
	}
	
	def getBindValue(Variable parameter, List<Binding> bindings, ModelFact asset) {
		for(Binding binding : bindings) {
			if(binding.variable.equals(parameter)){
				if(binding.bind.valueString !== null) {
					return "\"" + binding.bind.valueString + "\"";
				} else {
					return binding.bind.valueInteger;
				}
			}
		}
		if(asset instanceof ObjectFact) {
			val objectAsset = asset as ObjectFact;
			if(objectAsset.variable.equals(parameter)) {
				return objectAsset.variable.name;
			}
		}
		if(asset instanceof AttributeFact) {
			val attributeAsset = asset as AttributeFact;
			if(attributeAsset.variable.equals(parameter)) {
				return attributeAsset.variable.name;
			}
		}
		if(asset instanceof ReferenceFact) {
			val referenceAsset = asset as ReferenceFact;
			if(referenceAsset.sourceVar.equals(parameter)) {
				return referenceAsset.sourceVar.name;
			}
			if(referenceAsset.targetVar.equals(parameter)) {
				return referenceAsset.targetVar.name;
			}
		}
		return "_";
	}
	
	def getUsersOfRoleList2(List<Role> roles) {
		val userList = new HashSet<User>();
		for (Role role : roles) {
			if(role instanceof User) {
				userList.add(role as User);
			}
		}
		return userList;
	}
	
	def getUsersOfRoleList(List<Role> roles) {
		val userList = new ArrayList<User>();
		for (Role role : roles) {
			if(role instanceof User) {
				userList.add(role as User);
			} else {
				for (user : getUsersOfGroup(role as Group)) {
					userList.add(user);
				}
			}
		}
		return userList;
	}
	
	def Set<User> getUsersOfGroup(Group group){
		val userList = new HashSet<User>();
		for (role : group.roles) {
			if(role instanceof User){
			    userList.add(role as User);
			} else {
				userList.addAll(getUsersOfGroup(role as Group));
			}
		}
		return userList.filter(x | x.name.startsWith("user")).toSet();
	}
	
	def getPriorities(AccessControlModel AccessControlModel) {
		val priorities = new TreeSet<Integer>();
		for(rule : AccessControlModel.policy.rules) {
			priorities.add(rule.priority);
		}
		return priorities;
	}

	def generateMetaModelPattern(EPackage metamodel) {
		generateMetaModelPattern(metamodel, true)
	}
	
	def generateMetaModelPattern(EPackage metamodel, boolean requiredImport) '''
	�generateAttributeAssetPattern(metamodel)�
	
	�generateReferenceAssetPattern(metamodel)�
	
	�generateContainmentReferencePattern(metamodel)�
	�IF metamodel.EClassifiers.filter(EClass).exists[x | x.EAttributes.exists[y | y.ID]]�
	�generateIdAttributePattern(metamodel)�
	�ENDIF�
	
	�generateContainsPattern(metamodel)�
	
	�generateObjectAssetPattern(metamodel)�
	
	�generateRootPattern(metamodel)�
	
	�generateObjectAssetWithoutRootPattern�
	'''

    def generateAttributeAssetPattern(EPackage metamodel)'''
		pattern attributeAsset(source : EObject, value: java Object, attribute : java String) {
			�FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | !x.EAttributes.empty) SEPARATOR "\n} or {"�
				�FOR attribute : eClass.EAttributes SEPARATOR "\n} or {"�
				    find attributeAsset�eClass.name��attribute.name�(source, value, attribute);
				�ENDFOR�
		    �ENDFOR�
		}
		
		�FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | !x.EAttributes.empty) SEPARATOR "\n"�
		    �generateAttributeConstraints(eClass)�
		�ENDFOR�
	'''
	
	def generateReferenceAssetPattern(EPackage metamodel)'''
		pattern referenceAsset(source : EObject, target : EObject, reference : java String) {
			�FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | !x.EReferences.empty) SEPARATOR "\n} or {"�
				�FOR reference : eClass.EReferences SEPARATOR "\n} or {"�
				   find referenceAsset�eClass.name��reference.name�(source, target, reference);     
			    �ENDFOR�
			�ENDFOR�
		}
		
		�FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | !x.EReferences.empty) SEPARATOR "\n"�
		    �generateReferenceConstraints(eClass)�
		�ENDFOR�
	'''

    def generateContainmentReferencePattern(EPackage metamodel)'''
		pattern containmentReference(source : EObject, target : EObject, reference : java String) {
			�FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | x.EReferences.exists[y | y.containment]) SEPARATOR "\n} or {"�
				�FOR eReference : eClass.EReferences.filter[x | x.containment] SEPARATOR "\n} or {"�
					find referenceAsset(source, target, reference);
					�eClass.name�(source);
					reference == "�eReference.name�";
				�ENDFOR�
		    �ENDFOR�
		}
	'''

    def generateIdAttributePattern(EPackage metamodel)'''
		pattern idAttribute(source:EObject, value: java Object, attribute : java String) {
			�FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | x.EAttributes.exists[y | y.ID]) SEPARATOR "\n} or {"�
				�FOR eAttribute : eClass.EAttributes.filter[x | x.ID] SEPARATOR "\n} or {"�
					find attributeAsset(source, value, attribute);
					�eClass.name�(source);
					attribute == "�eAttribute.name�";
				�ENDFOR�
		    �ENDFOR�
		}
	'''

    def generateContainsPattern(EPackage metamodel)'''
		pattern contains(container: EObject, contained: EObject) {
			�FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | x.EReferences.exists[y | y.containment]) SEPARATOR "\n} or {"�
				�FOR eReference : eClass.EReferences.filter[x | x.isContainment] SEPARATOR "\n} or {"�
				�eClass.name�.�eReference.name�(container, contained);
				�ENDFOR�
		    �ENDFOR�
		}
	'''
	
	def generateObjectAssetPattern(EPackage metamodel)'''
		pattern objectAsset(object: EObject) {
			�FOR eClass : metamodel.EClassifiers.filter(EClass) SEPARATOR "\n} or {"�
			�eClass.name�(object);
		    �ENDFOR�
		}
	'''
	
	def generateRootPattern(EPackage metamodel)'''
		pattern root(object: EObject) {
		    �metamodel.EClassifiers.filter(EClass).head.name�(object);
		}
	'''
	
	def generateObjectAssetWithoutRootPattern()'''
		pattern objectAssetWithoutRoot(object: EObject) {
			find objectAsset(object);
			neg find root(object);
		}
	'''

    def generateAttributeConstraints(EClass eClass)'''
        �FOR attribute : eClass.EAttributes SEPARATOR "\n"�
		pattern attributeAsset�eClass.name��attribute.name�(source : EObject, value: java Object, attribute : java String)
		{
		     �eClass.name�.�attribute.name�(source, value);
			 attribute == "�attribute.name�";
		}
	    �ENDFOR�
	'''
	
	def generateReferenceConstraints(EClass eClass)'''
        �FOR reference : eClass.EReferences SEPARATOR "\n"�
        pattern referenceAsset�eClass.name��reference.name�(source : EObject, target : EObject, reference : java String)
        {
        	�eClass.name�.�reference.name�(source, target);
        	reference == "�reference.name�";
        }
	    �ENDFOR�
	'''
	
	def static qualifiedName(Pattern pattern) {
		val model = pattern.eContainer as PatternModel
		model.packageName+"."+pattern.name
	}
}